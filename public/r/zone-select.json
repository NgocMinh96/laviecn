{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "zone-select",
  "type": "registry:component",
  "registryDependencies": [
    "button",
    "label",
    "command",
    "popover"
  ],
  "files": [
    {
      "path": "registry/components/zone-select.tsx",
      "content": "\"use client\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\"\nimport { Label } from \"@/components/ui/label\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport { cn } from \"@/lib/utils\"\nimport { CheckIcon, ChevronDownIcon } from \"lucide-react\"\nimport { useEffect, useId, useState } from \"react\"\n\nexport interface ZoneItem {\n  id: string\n  name: string\n  name_slug: string\n  full_name: string\n  province_id?: string\n  district_id?: string\n}\n\ninterface ZoneSelectProps {\n  zone: ZoneItem[]\n  label?: string\n  placeholder?: string\n  value?: string\n  onSelect?: (value: string) => void\n  disabled?: boolean\n  className?: string\n}\n\nexport default function ZoneSelect({\n  zone,\n  label,\n  placeholder = \"Select zone\",\n  value: externalValue,\n  onSelect,\n  disabled,\n  className,\n}: ZoneSelectProps) {\n  const id = useId()\n  const [open, setOpen] = useState<boolean>(false)\n  const [internalValue, setInternalValue] = useState<string>(externalValue || \"\")\n\n  // Sync internal value with external value\n  useEffect(() => {\n    setInternalValue(externalValue || \"\")\n  }, [externalValue])\n\n  return (\n    <div className={cn(\"*:not-first:mt-2\", className)}>\n      {label && <Label htmlFor={id}>{label}</Label>}\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            id={id}\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={open}\n            className=\"bg-background hover:bg-background border-input w-full justify-between px-3 font-normal outline-none outline-offset-0 focus-visible:outline-[3px]\"\n            disabled={disabled}\n          >\n            <span className={cn(\"truncate\", !internalValue && \"text-muted-foreground\")}>\n              {internalValue\n                ? zone?.find((item: ZoneItem) => item.id === internalValue)?.full_name\n                : placeholder}\n            </span>\n            <ChevronDownIcon\n              size={16}\n              className=\"text-muted-foreground/80 shrink-0\"\n              aria-hidden=\"true\"\n            />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent\n          className=\"border-input w-full min-w-[var(--radix-popper-anchor-width)] p-0\"\n          align=\"start\"\n        >\n          <Command>\n            <CommandInput placeholder={placeholder} />\n            <CommandList>\n              <CommandEmpty>No zone found.</CommandEmpty>\n              <CommandGroup>\n                {zone?.map((item: ZoneItem) => (\n                  <CommandItem\n                    key={item.id}\n                    value={item.name_slug}\n                    onSelect={(currentValue) => {\n                      const selectedItem = zone.find((item) => item.name_slug === currentValue)\n                      const newValue = selectedItem ? selectedItem.id : \"\"\n                      setInternalValue(newValue)\n                      onSelect?.(newValue)\n                      setOpen(false)\n                    }}\n                  >\n                    {item.full_name}\n                    {internalValue === item.id && <CheckIcon size={16} className=\"ml-auto\" />}\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    }
  ]
}