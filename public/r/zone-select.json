{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "zone-select",
  "type": "registry:component",
  "registryDependencies": [
    "button",
    "label",
    "command",
    "popover",
    "https://laviecn.vercel.app/r/use-filter-zone.json"
  ],
  "files": [
    {
      "path": "registry/components/zone-select.tsx",
      "content": "\"use client\"\r\n\r\nimport { useEffect, useId, useState } from \"react\"\r\nimport { CheckIcon, ChevronDownIcon } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n} from \"@/components/ui/command\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\r\n\r\nexport interface ZoneItem {\r\n  id: string\r\n  name: string\r\n  name_slug: string\r\n  full_name: string\r\n  province_id?: string\r\n  district_id?: string\r\n}\r\n\r\ninterface ZoneSelectProps {\r\n  zone: ZoneItem[]\r\n  label?: string\r\n  placeholder?: string\r\n  value?: string\r\n  onSelect?: (value: string) => void\r\n  disabled?: boolean\r\n  className?: string\r\n}\r\n\r\nexport default function ZoneSelect({\r\n  zone,\r\n  label,\r\n  placeholder = \"Select zone\",\r\n  value: externalValue,\r\n  onSelect,\r\n  disabled,\r\n  className,\r\n}: ZoneSelectProps) {\r\n  const id = useId()\r\n  const [open, setOpen] = useState<boolean>(false)\r\n  const [internalValue, setInternalValue] = useState<string>(externalValue || \"\")\r\n\r\n  // Sync internal value with external value\r\n  useEffect(() => {\r\n    setInternalValue(externalValue || \"\")\r\n  }, [externalValue])\r\n\r\n  return (\r\n    <div className={cn(\"*:not-first:mt-2\", className)}>\r\n      {label && <Label htmlFor={id}>{label}</Label>}\r\n      <Popover open={open} onOpenChange={setOpen}>\r\n        <PopoverTrigger asChild>\r\n          <Button\r\n            id={id}\r\n            variant=\"outline\"\r\n            role=\"combobox\"\r\n            aria-expanded={open}\r\n            className=\"bg-background hover:bg-background border-input w-full justify-between px-3 font-normal outline-none outline-offset-0 focus-visible:outline-[3px]\"\r\n            disabled={disabled}\r\n          >\r\n            <span className={cn(\"truncate\", !internalValue && \"text-muted-foreground\")}>\r\n              {internalValue\r\n                ? zone?.find((item: ZoneItem) => item.id === internalValue)?.full_name\r\n                : placeholder}\r\n            </span>\r\n            <ChevronDownIcon\r\n              size={16}\r\n              className=\"text-muted-foreground/80 shrink-0\"\r\n              aria-hidden=\"true\"\r\n            />\r\n          </Button>\r\n        </PopoverTrigger>\r\n        <PopoverContent\r\n          className=\"border-input w-full min-w-[var(--radix-popper-anchor-width)] p-0\"\r\n          align=\"start\"\r\n        >\r\n          <Command>\r\n            <CommandInput placeholder={placeholder} />\r\n            <CommandList>\r\n              <CommandEmpty>No zone found.</CommandEmpty>\r\n              <CommandGroup>\r\n                {zone?.map((item: ZoneItem) => (\r\n                  <CommandItem\r\n                    key={item.id}\r\n                    value={item.name_slug}\r\n                    onSelect={(currentValue) => {\r\n                      const selectedItem = zone.find((item) => item.name_slug === currentValue)\r\n                      const newValue = selectedItem ? selectedItem.id : \"\"\r\n                      setInternalValue(newValue)\r\n                      onSelect?.(newValue)\r\n                      setOpen(false)\r\n                    }}\r\n                  >\r\n                    {item.full_name}\r\n                    {internalValue === item.id && <CheckIcon size={16} className=\"ml-auto\" />}\r\n                  </CommandItem>\r\n                ))}\r\n              </CommandGroup>\r\n            </CommandList>\r\n          </Command>\r\n        </PopoverContent>\r\n      </Popover>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}