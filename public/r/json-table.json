{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "json-table",
  "type": "registry:component",
  "dependencies": [
    "@dnd-kit/core",
    "@dnd-kit/modifiers",
    "@dnd-kit/sortable",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "input",
    "scroll-area",
    "table",
    "utils"
  ],
  "files": [
    {
      "path": "registry/components/json-table.tsx",
      "content": "\"use client\"\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\nimport {\r\n  closestCenter,\r\n  DndContext,\r\n  DragEndEvent,\r\n  KeyboardSensor,\r\n  MouseSensor,\r\n  TouchSensor,\r\n  useSensor,\r\n  useSensors,\r\n} from \"@dnd-kit/core\"\r\nimport { restrictToVerticalAxis } from \"@dnd-kit/modifiers\"\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  useSortable,\r\n  verticalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\"\r\nimport { CSS } from \"@dnd-kit/utilities\"\r\nimport { GripVertical, Plus, Trash2 } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\"\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\"\r\n\r\ntype Column = {\r\n  field: string\r\n  headerName: string\r\n  width?: number\r\n}\r\n\r\ntype Row = { uuid: string } & Record<string, string | boolean>\r\n\r\ntype JsonTableProps = {\r\n  columns: Column[]\r\n  data: Row[]\r\n  onSubmit?: (data: Row[]) => void\r\n}\r\n\r\nconst commonRowClass = \"hover:bg-transparent last:border-b!\"\r\nconst commonCellClass = \"p-0 align-middle px-0.5\"\r\n\r\nconst ActionsCell = ({\r\n  uuid,\r\n  onDelete,\r\n  listeners,\r\n  attributes,\r\n}: {\r\n  uuid: string\r\n  onDelete?: (uuid: string) => void\r\n  listeners?: React.HTMLAttributes<HTMLElement>\r\n  attributes?: React.HTMLAttributes<HTMLElement>\r\n}) => (\r\n  <TableCell className=\"w-[80px] h-12 bg-transparent hover:bg-transparent text-center flex items-center justify-center gap-1\">\r\n    <Button\r\n      variant=\"link\"\r\n      size=\"icon\"\r\n      onClick={() => onDelete?.(uuid)}\r\n      className=\"text-red-500 hover:text-red-700 hover:bg-transparent\"\r\n    >\r\n      <Trash2 className=\"size-4\" />\r\n    </Button>\r\n    <Button variant=\"link\" size=\"icon\" {...listeners} {...attributes}>\r\n      <GripVertical className=\"size-4\" />\r\n    </Button>\r\n  </TableCell>\r\n)\r\n\r\nfunction DraggableRow({\r\n  id,\r\n  children,\r\n}: {\r\n  id: string\r\n  children: (props: {\r\n    listeners?: React.HTMLAttributes<HTMLElement>\r\n    attributes?: React.HTMLAttributes<HTMLElement>\r\n  }) => React.ReactNode\r\n}) {\r\n  const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({\r\n    id,\r\n  })\r\n\r\n  return (\r\n    <TableRow\r\n      ref={setNodeRef}\r\n      style={{\r\n        transform: CSS.Transform.toString(transform),\r\n        transition,\r\n        opacity: isDragging ? 0.8 : 1,\r\n        zIndex: isDragging ? 1 : 0,\r\n        position: \"relative\",\r\n      }}\r\n      className={commonRowClass}\r\n      data-draggable-row\r\n    >\r\n      {children({ listeners, attributes })}\r\n    </TableRow>\r\n  )\r\n}\r\n\r\nexport function JsonTable({ columns, data: initialData, onSubmit }: JsonTableProps) {\r\n  const [data, setData] = useState<Row[]>(() =>\r\n    initialData.map((item) => ({ ...item, uuid: item.uuid || crypto.randomUUID() }))\r\n  )\r\n  const [isEditing, setIsEditing] = useState(false)\r\n  const [originalData, setOriginalData] = useState<Row[]>([])\r\n  const inputRefs = useRef<Record<string, HTMLInputElement | null>>({})\r\n  const [focusedCell, setFocusedCell] = useState<{ uuid: string; key: string } | null>(null)\r\n\r\n  const sensors = useSensors(\r\n    useSensor(MouseSensor),\r\n    useSensor(TouchSensor),\r\n    useSensor(KeyboardSensor)\r\n  )\r\n\r\n  const handleToggleEdit = () => {\r\n    setIsEditing((prev) => {\r\n      const next = !prev\r\n      if (next) setOriginalData(data)\r\n      else {\r\n        onSubmit?.(data)\r\n        setOriginalData([])\r\n      }\r\n      return next\r\n    })\r\n  }\r\n\r\n  const handleCancel = () => {\r\n    setData(originalData)\r\n    setIsEditing(false)\r\n    setOriginalData([])\r\n  }\r\n\r\n  const handleInputChange = (uuid: string, key: keyof Row, value: string) => {\r\n    setData((prev) => prev.map((row) => (row.uuid === uuid ? { ...row, [key]: value } : row)))\r\n  }\r\n\r\n  const handleDeleteRow = (uuid: string) => {\r\n    setData((prev) => prev.filter((row) => row.uuid !== uuid))\r\n  }\r\n\r\n  const handleAddRow = () => {\r\n    const uuid = crypto.randomUUID()\r\n    const emptyRow: Row = { uuid }\r\n    columns.forEach(({ field }) => (emptyRow[field] = \"\"))\r\n    setData((prev) => [...prev, emptyRow])\r\n  }\r\n\r\n  const handleDragEnd = ({ active, over }: DragEndEvent) => {\r\n    if (active.id !== over?.id && over) {\r\n      const oldIndex = data.findIndex((i) => i.uuid === active.id)\r\n      const newIndex = data.findIndex((i) => i.uuid === over.id)\r\n      setData(arrayMove(data, oldIndex, newIndex))\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (focusedCell) {\r\n      const { uuid, key } = focusedCell\r\n      inputRefs.current[`${uuid}-${key}`]?.focus()\r\n    }\r\n  }, [focusedCell])\r\n\r\n  const renderInputCell = (row: Row, field: string, width?: number) => {\r\n    const inputKey = `${row.uuid}-${field}`\r\n    const isFocused = focusedCell?.uuid === row.uuid && focusedCell?.key === field\r\n    return (\r\n      <TableCell\r\n        key={field}\r\n        style={width ? { width } : undefined}\r\n        className={cn(commonCellClass, {\r\n          \"shadow-[inset_0_0_0_0.5px_#3b82f6]\": isFocused,\r\n          \"bg-muted hover:bg-muted\": isEditing,\r\n        })}\r\n      >\r\n        <Input\r\n          ref={(el) => {\r\n            inputRefs.current[inputKey] = el\r\n          }}\r\n          value={String(row[field] || \"\")}\r\n          onChange={(e) => handleInputChange(row.uuid, field, e.target.value)}\r\n          onFocus={() => setFocusedCell({ uuid: row.uuid, key: field })}\r\n          onBlur={() => setFocusedCell(null)}\r\n          className=\"dark:bg-muted! text-sm shadow-none rounded-none border-0 focus-visible:ring-0 focus-visible:ring-offset-0 px-2\"\r\n          style={width ? { width } : undefined}\r\n        />\r\n      </TableCell>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"rounded-md border overflow-hidden not-prose\">\r\n      <ScrollArea>\r\n        <Table>\r\n          <TableHeader className=\"bg-muted/80\">\r\n            <TableRow>\r\n              {columns.map(({ headerName }, i) => (\r\n                <TableHead key={i}>{headerName}</TableHead>\r\n              ))}\r\n              <TableHead className=\"w-[80px]\"></TableHead>\r\n            </TableRow>\r\n          </TableHeader>\r\n        </Table>\r\n\r\n        <div\r\n          style={\r\n            {\r\n              \"--item-height\": \"48.7px\",\r\n              height: `calc(var(--item-height) * ${5})`,\r\n            } as React.CSSProperties\r\n          }\r\n        >\r\n          {isEditing ? (\r\n            <DndContext\r\n              collisionDetection={closestCenter}\r\n              modifiers={[restrictToVerticalAxis]}\r\n              onDragEnd={handleDragEnd}\r\n              sensors={sensors}\r\n            >\r\n              <Table>\r\n                <SortableContext\r\n                  items={data.map((row) => row.uuid)}\r\n                  strategy={verticalListSortingStrategy}\r\n                >\r\n                  <TableBody>\r\n                    {data.map((row) => (\r\n                      <DraggableRow key={row.uuid} id={row.uuid}>\r\n                        {({ listeners, attributes }) => (\r\n                          <>\r\n                            {columns.map(({ field, width }) => renderInputCell(row, field, width))}\r\n                            <ActionsCell\r\n                              uuid={row.uuid}\r\n                              onDelete={handleDeleteRow}\r\n                              listeners={listeners}\r\n                              attributes={attributes}\r\n                            />\r\n                          </>\r\n                        )}\r\n                      </DraggableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </SortableContext>\r\n              </Table>\r\n            </DndContext>\r\n          ) : (\r\n            <Table>\r\n              <TableBody>\r\n                {data.map((row) => (\r\n                  <TableRow key={row.uuid} className={commonRowClass}>\r\n                    {columns.map(({ field, width }) => (\r\n                      <TableCell\r\n                        key={field}\r\n                        style={width ? { width } : undefined}\r\n                        className={commonCellClass}\r\n                      >\r\n                        <div\r\n                          className=\"px-2 h-12 flex items-center\"\r\n                          style={width ? { width } : undefined}\r\n                        >\r\n                          {row[field] || \"\"}\r\n                        </div>\r\n                      </TableCell>\r\n                    ))}\r\n                    <ActionsCell uuid={row.uuid} />\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          )}\r\n        </div>\r\n        <ScrollBar orientation=\"horizontal\" />\r\n      </ScrollArea>\r\n\r\n      <div className=\"p-2 flex gap-2 justify-between border-t\">\r\n        <div className=\"flex gap-2\">\r\n          <Button size=\"sm\" onClick={handleToggleEdit}>\r\n            {isEditing ? \"Save\" : \"Edit\"}\r\n          </Button>\r\n          {isEditing && (\r\n            <Button size=\"sm\" variant=\"outline\" onClick={handleCancel}>\r\n              Cancel\r\n            </Button>\r\n          )}\r\n        </div>\r\n        {isEditing && (\r\n          <Button className=\"size-8\" variant=\"outline\" onClick={handleAddRow}>\r\n            <Plus className=\"size-4\" />\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}