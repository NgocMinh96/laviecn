{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "json-table",
  "type": "registry:component",
  "dependencies": [
    "@dnd-kit/core",
    "@dnd-kit/modifiers",
    "@dnd-kit/sortable",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "input",
    "scroll-area",
    "table",
    "utils"
  ],
  "files": [
    {
      "path": "registry/components/json-table.tsx",
      "content": "import { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\"\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\"\nimport { cn } from \"@/lib/utils\"\nimport {\n  closestCenter,\n  DndContext,\n  DragEndEvent,\n  KeyboardSensor,\n  MouseSensor,\n  TouchSensor,\n  useSensor,\n  useSensors,\n} from \"@dnd-kit/core\"\nimport { restrictToVerticalAxis } from \"@dnd-kit/modifiers\"\nimport {\n  arrayMove,\n  SortableContext,\n  useSortable,\n  verticalListSortingStrategy,\n} from \"@dnd-kit/sortable\"\nimport { CSS } from \"@dnd-kit/utilities\"\nimport { GripVertical, Plus, Trash2 } from \"lucide-react\"\nimport React, { useEffect, useRef, useState } from \"react\"\n\ntype Column = {\n  field: string\n  headerName: string\n  width?: number\n}\n\ntype Row = { uuid: string } & Record<string, string | boolean>\n\ntype JsonTableProps = {\n  columns: Column[]\n  data: Row[]\n  onSubmit?: (data: Row[]) => void\n}\n\nconst commonRowClass = \"hover:bg-transparent last:border-b!\"\nconst commonCellClass = \"p-0 align-middle px-0.5\"\n\nconst ActionsCell = ({\n  uuid,\n  onDelete,\n  listeners,\n  attributes,\n}: {\n  uuid: string\n  onDelete?: (uuid: string) => void\n  listeners?: React.HTMLAttributes<HTMLElement>\n  attributes?: React.HTMLAttributes<HTMLElement>\n}) => (\n  <TableCell className=\"w-[80px] h-12 bg-transparent hover:bg-transparent text-center flex items-center justify-center gap-1\">\n    <Button\n      variant=\"link\"\n      size=\"icon\"\n      onClick={() => onDelete?.(uuid)}\n      className=\"text-red-500 hover:text-red-700 hover:bg-transparent\"\n    >\n      <Trash2 className=\"size-4\" />\n    </Button>\n    <Button variant=\"link\" size=\"icon\" {...listeners} {...attributes}>\n      <GripVertical className=\"size-4\" />\n    </Button>\n  </TableCell>\n)\n\nfunction DraggableRow({\n  id,\n  children,\n}: {\n  id: string\n  children: (props: {\n    listeners?: React.HTMLAttributes<HTMLElement>\n    attributes?: React.HTMLAttributes<HTMLElement>\n  }) => React.ReactNode\n}) {\n  const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({\n    id,\n  })\n\n  return (\n    <TableRow\n      ref={setNodeRef}\n      style={{\n        transform: CSS.Transform.toString(transform),\n        transition,\n        opacity: isDragging ? 0.8 : 1,\n        zIndex: isDragging ? 1 : 0,\n        position: \"relative\",\n      }}\n      className={commonRowClass}\n      data-draggable-row\n    >\n      {children({ listeners, attributes })}\n    </TableRow>\n  )\n}\n\nexport function JsonTable({ columns, data: initialData, onSubmit }: JsonTableProps) {\n  const [data, setData] = useState<Row[]>(() =>\n    initialData.map((item) => ({ ...item, uuid: item.uuid || crypto.randomUUID() }))\n  )\n  const [isEditing, setIsEditing] = useState(false)\n  const [originalData, setOriginalData] = useState<Row[]>([])\n  const inputRefs = useRef<Record<string, HTMLInputElement | null>>({})\n  const [focusedCell, setFocusedCell] = useState<{ uuid: string; key: string } | null>(null)\n\n  const sensors = useSensors(\n    useSensor(MouseSensor),\n    useSensor(TouchSensor),\n    useSensor(KeyboardSensor)\n  )\n\n  const handleToggleEdit = () => {\n    setIsEditing((prev) => {\n      const next = !prev\n      if (next) setOriginalData(data)\n      else {\n        onSubmit?.(data)\n        setOriginalData([])\n      }\n      return next\n    })\n  }\n\n  const handleCancel = () => {\n    setData(originalData)\n    setIsEditing(false)\n    setOriginalData([])\n  }\n\n  const handleInputChange = (uuid: string, key: keyof Row, value: string) => {\n    setData((prev) => prev.map((row) => (row.uuid === uuid ? { ...row, [key]: value } : row)))\n  }\n\n  const handleDeleteRow = (uuid: string) => {\n    setData((prev) => prev.filter((row) => row.uuid !== uuid))\n  }\n\n  const handleAddRow = () => {\n    const uuid = crypto.randomUUID()\n    const emptyRow: Row = { uuid }\n    columns.forEach(({ field }) => (emptyRow[field] = \"\"))\n    setData((prev) => [...prev, emptyRow])\n  }\n\n  const handleDragEnd = ({ active, over }: DragEndEvent) => {\n    if (active.id !== over?.id && over) {\n      const oldIndex = data.findIndex((i) => i.uuid === active.id)\n      const newIndex = data.findIndex((i) => i.uuid === over.id)\n      setData(arrayMove(data, oldIndex, newIndex))\n    }\n  }\n\n  useEffect(() => {\n    if (focusedCell) {\n      const { uuid, key } = focusedCell\n      inputRefs.current[`${uuid}-${key}`]?.focus()\n    }\n  }, [focusedCell])\n\n  const renderInputCell = (row: Row, field: string, width?: number) => {\n    const inputKey = `${row.uuid}-${field}`\n    const isFocused = focusedCell?.uuid === row.uuid && focusedCell?.key === field\n    return (\n      <TableCell\n        key={field}\n        style={width ? { width } : undefined}\n        className={cn(commonCellClass, {\n          \"shadow-[inset_0_0_0_0.5px_#3b82f6]\": isFocused,\n          \"bg-muted hover:bg-muted\": isEditing,\n        })}\n      >\n        <Input\n          ref={(el) => {\n            inputRefs.current[inputKey] = el\n          }}\n          value={String(row[field] || \"\")}\n          onChange={(e) => handleInputChange(row.uuid, field, e.target.value)}\n          onFocus={() => setFocusedCell({ uuid: row.uuid, key: field })}\n          onBlur={() => setFocusedCell(null)}\n          className=\"dark:bg-muted! text-sm shadow-none rounded-none border-0 focus-visible:ring-0 focus-visible:ring-offset-0 px-2\"\n          style={width ? { width } : undefined}\n        />\n      </TableCell>\n    )\n  }\n\n  return (\n    <div className=\"rounded-md border overflow-hidden\">\n      <ScrollArea>\n        <Table>\n          <TableHeader className=\"bg-muted/50\">\n            <TableRow>\n              {columns.map(({ headerName }, i) => (\n                <TableHead key={i}>{headerName}</TableHead>\n              ))}\n              <TableHead className=\"w-[80px]\"></TableHead>\n            </TableRow>\n          </TableHeader>\n        </Table>\n\n        <div\n          style={\n            {\n              \"--item-height\": \"48.7px\",\n              height: `calc(var(--item-height) * ${5})`,\n            } as React.CSSProperties\n          }\n        >\n          {isEditing ? (\n            <DndContext\n              collisionDetection={closestCenter}\n              modifiers={[restrictToVerticalAxis]}\n              onDragEnd={handleDragEnd}\n              sensors={sensors}\n            >\n              <Table>\n                <SortableContext\n                  items={data.map((row) => row.uuid)}\n                  strategy={verticalListSortingStrategy}\n                >\n                  <TableBody>\n                    {data.map((row) => (\n                      <DraggableRow key={row.uuid} id={row.uuid}>\n                        {({ listeners, attributes }) => (\n                          <>\n                            {columns.map(({ field, width }) => renderInputCell(row, field, width))}\n                            <ActionsCell\n                              uuid={row.uuid}\n                              onDelete={handleDeleteRow}\n                              listeners={listeners}\n                              attributes={attributes}\n                            />\n                          </>\n                        )}\n                      </DraggableRow>\n                    ))}\n                  </TableBody>\n                </SortableContext>\n              </Table>\n            </DndContext>\n          ) : (\n            <Table>\n              <TableBody>\n                {data.map((row) => (\n                  <TableRow key={row.uuid} className={commonRowClass}>\n                    {columns.map(({ field, width }) => (\n                      <TableCell\n                        key={field}\n                        style={width ? { width } : undefined}\n                        className={commonCellClass}\n                      >\n                        <div\n                          className=\"px-2 h-12 flex items-center\"\n                          style={width ? { width } : undefined}\n                        >\n                          {row[field] || \"\"}\n                        </div>\n                      </TableCell>\n                    ))}\n                    <ActionsCell uuid={row.uuid} />\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </div>\n        <ScrollBar orientation=\"horizontal\" />\n      </ScrollArea>\n\n      <div className=\"p-2 flex gap-2 justify-between border-t\">\n        <div className=\"flex gap-2\">\n          <Button size=\"sm\" onClick={handleToggleEdit}>\n            {isEditing ? \"Save\" : \"Edit\"}\n          </Button>\n          {isEditing && (\n            <Button size=\"sm\" variant=\"outline\" onClick={handleCancel}>\n              Cancel\n            </Button>\n          )}\n        </div>\n        {isEditing && (\n          <Button className=\"size-8\" variant=\"outline\" onClick={handleAddRow}>\n            <Plus className=\"size-4\" />\n          </Button>\n        )}\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    }
  ]
}