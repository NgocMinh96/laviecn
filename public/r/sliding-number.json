{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sliding-number",
  "type": "registry:ui",
  "dependencies": [
    "motion",
    "react-use-measure"
  ],
  "files": [
    {
      "path": "registry/components/sliding-number.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport {\r\n  motion,\r\n  useInView,\r\n  useSpring,\r\n  useTransform,\r\n  type MotionValue,\r\n  type SpringOptions,\r\n  type UseInViewOptions,\r\n} from \"motion/react\"\r\nimport useMeasure from \"react-use-measure\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\ntype SlidingNumberRollerProps = {\r\n  prevValue: number\r\n  value: number\r\n  place: number\r\n  transition: SpringOptions\r\n}\r\n\r\nfunction SlidingNumberRoller({\r\n  prevValue,\r\n  value,\r\n  place,\r\n  transition,\r\n}: SlidingNumberRollerProps) {\r\n  const startNumber = Math.floor(prevValue / place) % 10\r\n  const targetNumber = Math.floor(value / place) % 10\r\n  const animatedValue = useSpring(startNumber, transition)\r\n\r\n  React.useEffect(() => {\r\n    animatedValue.set(targetNumber)\r\n  }, [targetNumber, animatedValue])\r\n\r\n  const [measureRef, { height }] = useMeasure()\r\n\r\n  return (\r\n    <span\r\n      ref={measureRef}\r\n      data-slot=\"sliding-number-roller\"\r\n      className=\"relative inline-block w-[1ch] overflow-x-visible overflow-y-clip leading-none tabular-nums\"\r\n    >\r\n      <span className=\"invisible\">0</span>\r\n      {Array.from({ length: 10 }, (_, i) => (\r\n        <SlidingNumberDisplay\r\n          key={i}\r\n          motionValue={animatedValue}\r\n          number={i}\r\n          height={height}\r\n          transition={transition}\r\n        />\r\n      ))}\r\n    </span>\r\n  )\r\n}\r\n\r\ntype SlidingNumberDisplayProps = {\r\n  motionValue: MotionValue<number>\r\n  number: number\r\n  height: number\r\n  transition: SpringOptions\r\n}\r\n\r\nfunction SlidingNumberDisplay({\r\n  motionValue,\r\n  number,\r\n  height,\r\n  transition,\r\n}: SlidingNumberDisplayProps) {\r\n  const y = useTransform(motionValue, (latest) => {\r\n    if (!height) return 0\r\n    const currentNumber = latest % 10\r\n    const offset = (10 + number - currentNumber) % 10\r\n    let translateY = offset * height\r\n    if (offset > 5) translateY -= 10 * height\r\n    return translateY\r\n  })\r\n\r\n  if (!height) {\r\n    return <span className=\"invisible absolute\">{number}</span>\r\n  }\r\n\r\n  return (\r\n    <motion.span\r\n      data-slot=\"sliding-number-display\"\r\n      style={{ y }}\r\n      className=\"absolute inset-0 flex items-center justify-center\"\r\n      transition={{ ...transition, type: \"spring\" }}\r\n    >\r\n      {number}\r\n    </motion.span>\r\n  )\r\n}\r\n\r\ntype SlidingNumberProps = React.ComponentProps<\"span\"> & {\r\n  number: number | string\r\n  inView?: boolean\r\n  inViewMargin?: UseInViewOptions[\"margin\"]\r\n  inViewOnce?: boolean\r\n  padStart?: boolean\r\n  decimalSeparator?: string\r\n  decimalPlaces?: number\r\n  transition?: SpringOptions\r\n}\r\n\r\nfunction SlidingNumber({\r\n  ref,\r\n  number,\r\n  className,\r\n  inView = false,\r\n  inViewMargin = \"0px\",\r\n  inViewOnce = true,\r\n  padStart = false,\r\n  decimalSeparator = \".\",\r\n  decimalPlaces = 0,\r\n  transition = {\r\n    stiffness: 200,\r\n    damping: 20,\r\n    mass: 0.4,\r\n  },\r\n  ...props\r\n}: SlidingNumberProps) {\r\n  const localRef = React.useRef<HTMLSpanElement>(null)\r\n  React.useImperativeHandle(ref, () => localRef.current!)\r\n\r\n  const inViewResult = useInView(localRef, {\r\n    once: inViewOnce,\r\n    margin: inViewMargin,\r\n  })\r\n  const isInView = !inView || inViewResult\r\n\r\n  const prevNumberRef = React.useRef<number>(0)\r\n\r\n  const effectiveNumber = React.useMemo(\r\n    () => (!isInView ? 0 : Math.abs(Number(number))),\r\n    [number, isInView]\r\n  )\r\n\r\n  const formatNumber = React.useCallback(\r\n    (num: number) =>\r\n      decimalPlaces != null ? num.toFixed(decimalPlaces) : num.toString(),\r\n    [decimalPlaces]\r\n  )\r\n\r\n  const numberStr = formatNumber(effectiveNumber)\r\n  const [newIntStrRaw, newDecStrRaw = \"\"] = numberStr.split(\".\")\r\n  const newIntStr =\r\n    padStart && newIntStrRaw?.length === 1 ? \"0\" + newIntStrRaw : newIntStrRaw\r\n\r\n  const prevFormatted = formatNumber(prevNumberRef.current)\r\n  const [prevIntStrRaw = \"\", prevDecStrRaw = \"\"] = prevFormatted.split(\".\")\r\n  const prevIntStr =\r\n    padStart && prevIntStrRaw.length === 1 ? \"0\" + prevIntStrRaw : prevIntStrRaw\r\n\r\n  const adjustedPrevInt = React.useMemo(() => {\r\n    return prevIntStr.length > (newIntStr?.length ?? 0)\r\n      ? prevIntStr.slice(-(newIntStr?.length ?? 0))\r\n      : prevIntStr.padStart(newIntStr?.length ?? 0, \"0\")\r\n  }, [prevIntStr, newIntStr])\r\n\r\n  const adjustedPrevDec = React.useMemo(() => {\r\n    if (!newDecStrRaw) return \"\"\r\n    return prevDecStrRaw.length > newDecStrRaw.length\r\n      ? prevDecStrRaw.slice(0, newDecStrRaw.length)\r\n      : prevDecStrRaw.padEnd(newDecStrRaw.length, \"0\")\r\n  }, [prevDecStrRaw, newDecStrRaw])\r\n\r\n  React.useEffect(() => {\r\n    if (isInView) prevNumberRef.current = effectiveNumber\r\n  }, [effectiveNumber, isInView])\r\n\r\n  const intDigitCount = newIntStr?.length ?? 0\r\n  const intPlaces = React.useMemo(\r\n    () =>\r\n      Array.from({ length: intDigitCount }, (_, i) =>\r\n        Math.pow(10, intDigitCount - i - 1)\r\n      ),\r\n    [intDigitCount]\r\n  )\r\n  const decPlaces = React.useMemo(\r\n    () =>\r\n      newDecStrRaw\r\n        ? Array.from({ length: newDecStrRaw.length }, (_, i) =>\r\n            Math.pow(10, newDecStrRaw.length - i - 1)\r\n          )\r\n        : [],\r\n    [newDecStrRaw]\r\n  )\r\n\r\n  const newDecValue = newDecStrRaw ? parseInt(newDecStrRaw, 10) : 0\r\n  const prevDecValue = adjustedPrevDec ? parseInt(adjustedPrevDec, 10) : 0\r\n\r\n  return (\r\n    <span\r\n      ref={localRef}\r\n      data-slot=\"sliding-number\"\r\n      className={cn(\"flex items-center\", className)}\r\n      {...props}\r\n    >\r\n      {isInView && Number(number) < 0 && <span className=\"mr-1\">-</span>}\r\n\r\n      {intPlaces.map((place) => (\r\n        <SlidingNumberRoller\r\n          key={`int-${place}`}\r\n          prevValue={parseInt(adjustedPrevInt, 10)}\r\n          value={parseInt(newIntStr ?? \"0\", 10)}\r\n          place={place}\r\n          transition={transition}\r\n        />\r\n      ))}\r\n\r\n      {newDecStrRaw && (\r\n        <>\r\n          <span>{decimalSeparator}</span>\r\n          {decPlaces.map((place) => (\r\n            <SlidingNumberRoller\r\n              key={`dec-${place}`}\r\n              prevValue={prevDecValue}\r\n              value={newDecValue}\r\n              place={place}\r\n              transition={transition}\r\n            />\r\n          ))}\r\n        </>\r\n      )}\r\n    </span>\r\n  )\r\n}\r\n\r\nexport { SlidingNumber, type SlidingNumberProps }\r\n",
      "type": "registry:ui"
    }
  ]
}