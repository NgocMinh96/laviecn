{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "zone-filter",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "input",
    "scroll-area",
    "https://laviecn.vercel.app/r/use-filter-zone.json"
  ],
  "files": [
    {
      "path": "registry/components/zone-filter.tsx",
      "content": "import { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\"\nimport { ArrowLeft } from \"lucide-react\"\nimport React, { useState } from \"react\"\nimport type { District, Province, Ward } from \"../hooks/use-filter-zone\"\n\ninterface ZoneFilterProps {\n  provinces: Province[]\n  districts: District[]\n  wards: Ward[]\n  filteredProvinces: Province[]\n  filteredDistricts: District[]\n  filteredWards: Ward[]\n  selectedProvince?: string\n  selectedDistrict?: string\n  selectedWard?: string\n  handleSelectProvince: (id: string) => void\n  handleSelectDistrict: (id: string) => void\n  handleSelectWard: (id: string) => void\n  onChange?: (zone: { province?: Province; district?: District; ward?: Ward }) => void\n}\n\nexport default function ZoneFilter({\n  provinces,\n  districts,\n  wards,\n  filteredProvinces,\n  filteredDistricts,\n  filteredWards,\n  selectedProvince,\n  selectedDistrict,\n  selectedWard,\n  handleSelectProvince,\n  handleSelectDistrict,\n  handleSelectWard,\n  onChange,\n}: ZoneFilterProps) {\n  const [step, setStep] = useState(0)\n  const [search, setSearch] = useState(\"\")\n\n  const stepMap = [\n    {\n      label: \"Tỉnh/Thành phố\",\n      items: filteredProvinces,\n      selectedId: selectedProvince,\n      handler: handleSelectProvince,\n    },\n    {\n      label: \"Quận/Huyện\",\n      items: filteredDistricts,\n      selectedId: selectedDistrict,\n      handler: handleSelectDistrict,\n    },\n    {\n      label: \"Phường/Xã\",\n      items: filteredWards,\n      selectedId: selectedWard,\n      handler: handleSelectWard,\n    },\n  ]\n\n  const { label, items, selectedId, handler } = stepMap[step]\n\n  const getFilteredItems = () => {\n    const keyword = search.trim().toLowerCase()\n    if (!keyword) return items\n    return items.filter((item) =>\n      [item.name, item.full_name, item.name_slug].some((field) =>\n        field?.toLowerCase().includes(keyword)\n      )\n    )\n  }\n\n  const filteredItems = getFilteredItems()\n\n  const rows = 4\n  const columns = Math.max(5, Math.ceil(filteredItems.length / rows))\n  const height = 46 * rows\n\n  const triggerOnChange = (id: string) => {\n    onChange?.({\n      province: provinces.find((p) => p.id === (step === 0 ? id : selectedProvince)),\n      district: districts.find((d) => d.id === (step === 1 ? id : selectedDistrict)),\n      ward: wards.find((w) => w.id === (step === 2 ? id : selectedWard)),\n    })\n  }\n\n  const handleSelect = (id: string) => {\n    handler(id)\n    triggerOnChange(id)\n\n    if (step < 2) {\n      setStep(step + 1)\n      setSearch(\"\")\n    }\n  }\n\n  const onBack = () => {\n    let newStep = step\n\n    if (step === 2) {\n      handleSelectWard(\"\")\n      newStep = 1\n    } else if (step === 1) {\n      handleSelectDistrict(\"\")\n      newStep = 0\n    }\n\n    setStep(newStep)\n    setSearch(\"\")\n\n    onChange?.({\n      province: provinces.find((p) => p.id === selectedProvince),\n      district: newStep >= 1 ? districts.find((d) => d.id === selectedDistrict) : undefined,\n      ward: undefined,\n    })\n  }\n\n  return (\n    <div className=\"w-full rounded-md border\">\n      <div className=\"flex justify-between gap-2 items-center h-10 px-2 pt-2\">\n        <Input\n          placeholder={`Tìm kiếm ${label.toLowerCase()}...`}\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n          className=\"w-full h-8\"\n        />\n        <Button\n          disabled={step === 0}\n          variant=\"outline\"\n          size=\"icon\"\n          className=\"size-8\"\n          onClick={onBack}\n        >\n          <ArrowLeft />\n        </Button>\n      </div>\n\n      <ScrollArea className=\"p-2\" style={{ height, overflowY: \"hidden\" }}>\n        <div\n          className=\"grid gap-2\"\n          style={{\n            gridTemplateColumns: `repeat(${columns}, max-content)`,\n            gridAutoFlow: \"row\",\n          }}\n        >\n          {filteredItems.map((item) => (\n            <Button\n              key={item.id}\n              variant={selectedId === item.id ? \"default\" : \"outline\"}\n              onClick={() => handleSelect(item.id)}\n              className=\"justify-start whitespace-nowrap\"\n              style={{ width: 142 }}\n            >\n              {item.name}\n            </Button>\n          ))}\n        </div>\n        <ScrollBar orientation=\"horizontal\" />\n      </ScrollArea>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    }
  ]
}