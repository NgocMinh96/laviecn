{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "zone-filter",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "input",
    "scroll-area",
    "https://laviecn.vercel.app/r/use-filter-zone.json"
  ],
  "files": [
    {
      "path": "registry/components/zone-filter.tsx",
      "content": "\"use client\"\r\n\r\nimport React, { useState } from \"react\"\r\nimport { ArrowLeft, MapPin } from \"lucide-react\"\r\n\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\"\r\n\r\nimport type { District, Province, Ward } from \"../hooks/use-filter-zone\"\r\n\r\ninterface ZoneFilterProps {\r\n  provinces: Province[]\r\n  districts: District[]\r\n  wards: Ward[]\r\n  filteredProvinces: Province[]\r\n  filteredDistricts: District[]\r\n  filteredWards: Ward[]\r\n  selectedProvince?: string\r\n  selectedDistrict?: string\r\n  selectedWard?: string\r\n  handleSelectProvince: (id: string) => void\r\n  handleSelectDistrict: (id: string) => void\r\n  handleSelectWard: (id: string) => void\r\n  onChange?: (zone: { province?: Province; district?: District; ward?: Ward }) => void\r\n}\r\n\r\nexport default function ZoneFilter({\r\n  provinces,\r\n  districts,\r\n  wards,\r\n  filteredProvinces,\r\n  filteredDistricts,\r\n  filteredWards,\r\n  selectedProvince,\r\n  selectedDistrict,\r\n  selectedWard,\r\n  handleSelectProvince,\r\n  handleSelectDistrict,\r\n  handleSelectWard,\r\n  onChange,\r\n}: ZoneFilterProps) {\r\n  const [step, setStep] = useState(0)\r\n  const [search, setSearch] = useState(\"\")\r\n\r\n  const stepMap = [\r\n    {\r\n      label: \"Tỉnh/Thành phố\",\r\n      items: filteredProvinces,\r\n      selectedId: selectedProvince,\r\n      handler: handleSelectProvince,\r\n    },\r\n    {\r\n      label: \"Quận/Huyện\",\r\n      items: filteredDistricts,\r\n      selectedId: selectedDistrict,\r\n      handler: handleSelectDistrict,\r\n    },\r\n    {\r\n      label: \"Phường/Xã\",\r\n      items: filteredWards,\r\n      selectedId: selectedWard,\r\n      handler: handleSelectWard,\r\n    },\r\n  ]\r\n\r\n  const { label, items, selectedId, handler } = stepMap[step]\r\n\r\n  const getFilteredItems = () => {\r\n    const keyword = search.trim().toLowerCase()\r\n    if (!keyword) return items\r\n    return items.filter((item) =>\r\n      [item.name, item.full_name, item.name_slug].some((field) =>\r\n        field?.toLowerCase().includes(keyword)\r\n      )\r\n    )\r\n  }\r\n\r\n  const filteredItems = getFilteredItems()\r\n\r\n  const rows = 4\r\n  const columns = Math.max(5, Math.ceil(filteredItems.length / rows))\r\n  const height = 46 * rows\r\n\r\n  const triggerOnChange = (id: string) => {\r\n    onChange?.({\r\n      province: provinces.find((p) => p.id === (step === 0 ? id : selectedProvince)),\r\n      district: districts.find((d) => d.id === (step === 1 ? id : selectedDistrict)),\r\n      ward: wards.find((w) => w.id === (step === 2 ? id : selectedWard)),\r\n    })\r\n  }\r\n\r\n  const handleSelect = (id: string) => {\r\n    handler(id)\r\n    triggerOnChange(id)\r\n\r\n    if (step < 2) {\r\n      setStep(step + 1)\r\n      setSearch(\"\")\r\n    }\r\n  }\r\n\r\n  const onBack = () => {\r\n    let newStep = step\r\n\r\n    if (step === 2) {\r\n      handleSelectWard(\"\")\r\n      newStep = 1\r\n    } else if (step === 1) {\r\n      handleSelectDistrict(\"\")\r\n      newStep = 0\r\n    }\r\n\r\n    setStep(newStep)\r\n    setSearch(\"\")\r\n\r\n    onChange?.({\r\n      province: provinces.find((p) => p.id === selectedProvince),\r\n      district: newStep >= 1 ? districts.find((d) => d.id === selectedDistrict) : undefined,\r\n      ward: undefined,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full rounded-md border\">\r\n      <div className=\"flex justify-between gap-2 items-center h-10 px-2 pt-2\">\r\n        <Input\r\n          placeholder={`Tìm kiếm ${label.toLowerCase()}...`}\r\n          value={search}\r\n          onChange={(e) => setSearch(e.target.value)}\r\n          className=\"w-full h-8\"\r\n        />\r\n        <Button\r\n          disabled={step === 0}\r\n          variant=\"outline\"\r\n          size=\"icon\"\r\n          className=\"size-8\"\r\n          onClick={onBack}\r\n        >\r\n          <ArrowLeft />\r\n        </Button>\r\n      </div>\r\n\r\n      <ScrollArea className=\"p-2\" style={{ height, overflowY: \"hidden\" }}>\r\n        <div\r\n          className=\"grid gap-2\"\r\n          style={{\r\n            gridTemplateColumns: `repeat(${columns}, max-content)`,\r\n            gridAutoFlow: \"row\",\r\n          }}\r\n        >\r\n          {filteredItems.map((item) => (\r\n            <Button\r\n              key={item.id}\r\n              variant={selectedId === item.id ? \"default\" : \"outline\"}\r\n              onClick={() => handleSelect(item.id)}\r\n              className=\"justify-start whitespace-nowrap text-xs has-[>svg]:px-1 gap-0.5\"\r\n              style={{ width: 142 }}\r\n            >\r\n              <MapPin className=\"size-3\" />\r\n              {item.full_name}\r\n            </Button>\r\n          ))}\r\n        </div>\r\n        <ScrollBar orientation=\"horizontal\" />\r\n      </ScrollArea>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}