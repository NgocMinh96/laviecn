{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "horizontal-scroll-menu",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "utils"
  ],
  "files": [
    {
      "path": "registry/components/horizontal-scroll-menu.tsx",
      "content": "\"use client\"\r\n\r\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\"\r\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button } from \"@/components/ui/button\"\r\n\r\nconst SCROLL_AMOUNT = 200\r\nconst SCROLL_MULTIPLIER = 1.5\r\n\r\ninterface MenuItem {\r\n  id: string\r\n  name: string\r\n}\r\n\r\ninterface HorizontalScrollMenuProps {\r\n  menu: MenuItem[]\r\n  selected?: string\r\n  onFilterChange?: (filter: string) => void\r\n  showScrollButton?: boolean\r\n}\r\n\r\ninterface ScrollState {\r\n  canScrollLeft: boolean\r\n  canScrollRight: boolean\r\n}\r\n\r\nconst useHorizontalScroll = (scrollAmount = SCROLL_AMOUNT) => {\r\n  const scrollContainerRef = useRef<HTMLDivElement>(null)\r\n  const [scrollState, setScrollState] = useState<ScrollState>({\r\n    canScrollLeft: false,\r\n    canScrollRight: false,\r\n  })\r\n\r\n  const checkScroll = useCallback(() => {\r\n    const container = scrollContainerRef.current\r\n    if (!container) return\r\n\r\n    const { scrollLeft, scrollWidth, clientWidth } = container\r\n    setScrollState({\r\n      canScrollLeft: scrollLeft > 0,\r\n      canScrollRight: scrollLeft < scrollWidth - clientWidth - 1,\r\n    })\r\n  }, [])\r\n\r\n  const scroll = useCallback(\r\n    (direction: \"left\" | \"right\") => {\r\n      const container = scrollContainerRef.current\r\n      if (!container) return\r\n\r\n      const newScrollLeft =\r\n        direction === \"left\"\r\n          ? container.scrollLeft - scrollAmount\r\n          : container.scrollLeft + scrollAmount\r\n\r\n      container.scrollTo({\r\n        left: newScrollLeft,\r\n        behavior: \"smooth\",\r\n      })\r\n    },\r\n    [scrollAmount]\r\n  )\r\n\r\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\r\n    const container = scrollContainerRef.current\r\n    if (!container) return\r\n\r\n    const startX = e.pageX - container.offsetLeft\r\n    const scrollLeft = container.scrollLeft\r\n\r\n    const handleMouseMove = (e: MouseEvent) => {\r\n      const x = e.pageX - container.offsetLeft\r\n      const walk = (x - startX) * SCROLL_MULTIPLIER\r\n      container.scrollLeft = scrollLeft - walk\r\n    }\r\n\r\n    const handleMouseUp = () => {\r\n      document.removeEventListener(\"mousemove\", handleMouseMove)\r\n      document.removeEventListener(\"mouseup\", handleMouseUp)\r\n    }\r\n\r\n    document.addEventListener(\"mousemove\", handleMouseMove)\r\n    document.addEventListener(\"mouseup\", handleMouseUp)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const container = scrollContainerRef.current\r\n    if (!container) return\r\n\r\n    const handleScroll = () => checkScroll()\r\n    const handleResize = () => checkScroll()\r\n\r\n    container.addEventListener(\"scroll\", handleScroll)\r\n    window.addEventListener(\"resize\", handleResize)\r\n\r\n    checkScroll()\r\n\r\n    return () => {\r\n      container.removeEventListener(\"scroll\", handleScroll)\r\n      window.removeEventListener(\"resize\", handleResize)\r\n    }\r\n  }, [checkScroll])\r\n\r\n  return {\r\n    scrollContainerRef,\r\n    scrollState,\r\n    scroll,\r\n    handleMouseDown,\r\n  }\r\n}\r\n\r\nexport function HorizontalScrollMenu({\r\n  menu,\r\n  selected,\r\n  onFilterChange,\r\n  showScrollButton = false,\r\n}: HorizontalScrollMenuProps) {\r\n  const [selectedFilter, setSelectedFilter] = useState(selected)\r\n  const { scrollContainerRef, scrollState, scroll, handleMouseDown } = useHorizontalScroll()\r\n\r\n  const handleFilterChange = useCallback(\r\n    (filter: string) => {\r\n      setSelectedFilter(filter)\r\n      onFilterChange?.(filter)\r\n    },\r\n    [onFilterChange]\r\n  )\r\n\r\n  const buttonVariants = useMemo(\r\n    () => ({\r\n      selected: \"default\",\r\n      unselected: \"bg-secondary text-secondary-foreground hover:bg-secondary/50\",\r\n    }),\r\n    []\r\n  )\r\n\r\n  return (\r\n    <div className=\"relative w-full\">\r\n      <div className=\"container relative flex h-10 items-center justify-center px-3\">\r\n        {showScrollButton && (\r\n          <Button\r\n            variant=\"secondary\"\r\n            size=\"icon\"\r\n            className={cn(\r\n              \"bg-background hover:bg-background rounded-full absolute left-0 z-10 h-8 w-8\",\r\n              !scrollState.canScrollLeft && \"hidden\"\r\n            )}\r\n            onClick={() => scroll(\"left\")}\r\n          >\r\n            <ChevronLeft className=\"size-4\" />\r\n          </Button>\r\n        )}\r\n\r\n        <div\r\n          ref={scrollContainerRef}\r\n          className=\"w-full overflow-x-auto scrollbar-none\"\r\n          style={{\r\n            scrollbarWidth: \"none\",\r\n            msOverflowStyle: \"none\",\r\n          }}\r\n          onMouseDown={handleMouseDown}\r\n        >\r\n          <div className=\"flex gap-2\">\r\n            {menu.map((item) => (\r\n              <Button\r\n                key={item.id}\r\n                variant={selectedFilter === item.id ? \"default\" : \"ghost\"}\r\n                className={cn(\r\n                  \"text-sm font-medium whitespace-nowrap h-8\",\r\n                  selectedFilter === item.id ? buttonVariants.selected : buttonVariants.unselected\r\n                )}\r\n                onClick={() => handleFilterChange(item.id)}\r\n              >\r\n                {item.name}\r\n              </Button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {showScrollButton && (\r\n          <Button\r\n            variant=\"secondary\"\r\n            size=\"icon\"\r\n            className={cn(\r\n              \"bg-background hover:bg-background rounded-full absolute right-0 z-10 h-8 w-8\",\r\n              !scrollState.canScrollRight && \"hidden\"\r\n            )}\r\n            onClick={() => scroll(\"right\")}\r\n          >\r\n            <ChevronRight className=\"size-4\" />\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}