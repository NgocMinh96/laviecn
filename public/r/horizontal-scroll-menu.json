{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "horizontal-scroll-menu",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "utils"
  ],
  "files": [
    {
      "path": "registry/components/horizontal-scroll-menu.tsx",
      "content": "\"use client\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { cn } from \"@/lib/utils\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\"\n\nconst SCROLL_AMOUNT = 200\nconst SCROLL_MULTIPLIER = 1.5\n\ninterface MenuItem {\n  id: string\n  name: string\n}\n\ninterface HorizontalScrollMenuProps {\n  menu: MenuItem[]\n  selected?: string\n  onFilterChange?: (filter: string) => void\n}\n\ninterface ScrollState {\n  canScrollLeft: boolean\n  canScrollRight: boolean\n}\n\nconst useHorizontalScroll = (scrollAmount = SCROLL_AMOUNT) => {\n  const scrollContainerRef = useRef<HTMLDivElement>(null)\n  const [scrollState, setScrollState] = useState<ScrollState>({\n    canScrollLeft: false,\n    canScrollRight: false,\n  })\n\n  const checkScroll = useCallback(() => {\n    const container = scrollContainerRef.current\n    if (!container) return\n\n    const { scrollLeft, scrollWidth, clientWidth } = container\n    setScrollState({\n      canScrollLeft: scrollLeft > 0,\n      canScrollRight: scrollLeft < scrollWidth - clientWidth - 1,\n    })\n  }, [])\n\n  const scroll = useCallback(\n    (direction: \"left\" | \"right\") => {\n      const container = scrollContainerRef.current\n      if (!container) return\n\n      const newScrollLeft =\n        direction === \"left\"\n          ? container.scrollLeft - scrollAmount\n          : container.scrollLeft + scrollAmount\n\n      container.scrollTo({\n        left: newScrollLeft,\n        behavior: \"smooth\",\n      })\n    },\n    [scrollAmount]\n  )\n\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\n    const container = scrollContainerRef.current\n    if (!container) return\n\n    const startX = e.pageX - container.offsetLeft\n    const scrollLeft = container.scrollLeft\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const x = e.pageX - container.offsetLeft\n      const walk = (x - startX) * SCROLL_MULTIPLIER\n      container.scrollLeft = scrollLeft - walk\n    }\n\n    const handleMouseUp = () => {\n      document.removeEventListener(\"mousemove\", handleMouseMove)\n      document.removeEventListener(\"mouseup\", handleMouseUp)\n    }\n\n    document.addEventListener(\"mousemove\", handleMouseMove)\n    document.addEventListener(\"mouseup\", handleMouseUp)\n  }, [])\n\n  useEffect(() => {\n    const container = scrollContainerRef.current\n    if (!container) return\n\n    const handleScroll = () => checkScroll()\n    const handleResize = () => checkScroll()\n\n    container.addEventListener(\"scroll\", handleScroll)\n    window.addEventListener(\"resize\", handleResize)\n\n    checkScroll()\n\n    return () => {\n      container.removeEventListener(\"scroll\", handleScroll)\n      window.removeEventListener(\"resize\", handleResize)\n    }\n  }, [checkScroll])\n\n  return {\n    scrollContainerRef,\n    scrollState,\n    scroll,\n    handleMouseDown,\n  }\n}\n\nexport function HorizontalScrollMenu({\n  menu,\n  selected,\n  onFilterChange,\n}: HorizontalScrollMenuProps) {\n  const [selectedFilter, setSelectedFilter] = useState(selected)\n  const { scrollContainerRef, scrollState, scroll, handleMouseDown } = useHorizontalScroll()\n\n  const handleFilterChange = useCallback(\n    (filter: string) => {\n      setSelectedFilter(filter)\n      onFilterChange?.(filter)\n    },\n    [onFilterChange]\n  )\n\n  const buttonVariants = useMemo(\n    () => ({\n      selected: \"default\",\n      unselected: \"bg-secondary text-secondary-foreground hover:bg-secondary/50\",\n    }),\n    []\n  )\n\n  return (\n    <div className=\"relative w-full\">\n      <div className=\"container relative flex h-10 items-center justify-center px-3\">\n        <Button\n          variant=\"secondary\"\n          size=\"icon\"\n          className={cn(\n            \"bg-background rounded-full absolute left-0 z-10 h-8 w-8\",\n            !scrollState.canScrollLeft && \"hidden\"\n          )}\n          onClick={() => scroll(\"left\")}\n        >\n          <ChevronLeft className=\"size-4\" />\n        </Button>\n\n        <div\n          ref={scrollContainerRef}\n          className=\"w-full overflow-x-auto scrollbar-none\"\n          style={{\n            scrollbarWidth: \"none\",\n            msOverflowStyle: \"none\",\n          }}\n          onMouseDown={handleMouseDown}\n        >\n          <div className=\"flex gap-2\">\n            {menu.map((item) => (\n              <Button\n                key={item.id}\n                variant={selectedFilter === item.id ? \"default\" : \"ghost\"}\n                className={cn(\n                  \"text-sm font-medium whitespace-nowrap h-8\",\n                  selectedFilter === item.id ? buttonVariants.selected : buttonVariants.unselected\n                )}\n                onClick={() => handleFilterChange(item.id)}\n              >\n                {item.name}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        <Button\n          variant=\"secondary\"\n          size=\"icon\"\n          className={cn(\n            \"bg-background rounded-full absolute right-0 z-10 h-8 w-8\",\n            !scrollState.canScrollRight && \"hidden\"\n          )}\n          onClick={() => scroll(\"right\")}\n        >\n          <ChevronRight className=\"size-4\" />\n        </Button>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    }
  ]
}