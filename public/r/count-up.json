{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "count-up",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/components/count-up.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useRef } from \"react\"\nimport { useInView, useMotionValue, useSpring } from \"motion/react\"\n\ninterface CountUpProps {\n  to: number\n  from?: number\n  direction?: \"up\" | \"down\"\n  delay?: number\n  duration?: number\n  className?: string\n  startWhen?: boolean\n  separator?: string\n  onStart?: () => void\n  onEnd?: () => void\n}\n\nexport default function CountUp({\n  to,\n  from = 0,\n  direction = \"up\",\n  delay = 0,\n  duration = 2,\n  className = \"\",\n  startWhen = true,\n  separator = \"\",\n  onStart,\n  onEnd,\n}: CountUpProps) {\n  const ref = useRef<HTMLSpanElement>(null)\n  const motionValue = useMotionValue(direction === \"down\" ? to : from)\n\n  const damping = 20 + 40 * (1 / duration)\n  const stiffness = 100 * (1 / duration)\n\n  const springValue = useSpring(motionValue, {\n    damping,\n    stiffness,\n  })\n\n  const isInView = useInView(ref, { once: true, margin: \"0px\" })\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.textContent = String(direction === \"down\" ? to : from)\n    }\n  }, [from, to, direction])\n\n  useEffect(() => {\n    if (isInView && startWhen) {\n      if (typeof onStart === \"function\") {\n        onStart()\n      }\n\n      const timeoutId = setTimeout(() => {\n        motionValue.set(direction === \"down\" ? from : to)\n      }, delay * 1000)\n\n      const durationTimeoutId = setTimeout(\n        () => {\n          if (typeof onEnd === \"function\") {\n            onEnd()\n          }\n        },\n        delay * 1000 + duration * 1000\n      )\n\n      return () => {\n        clearTimeout(timeoutId)\n        clearTimeout(durationTimeoutId)\n      }\n    }\n  }, [\n    isInView,\n    startWhen,\n    motionValue,\n    direction,\n    from,\n    to,\n    delay,\n    onStart,\n    onEnd,\n    duration,\n  ])\n\n  useEffect(() => {\n    const unsubscribe = springValue.on(\"change\", (latest) => {\n      if (ref.current) {\n        const options = {\n          useGrouping: !!separator,\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 0,\n        }\n\n        const formattedNumber = Intl.NumberFormat(\"en-US\", options).format(\n          Number(latest.toFixed(0))\n        )\n\n        ref.current.textContent = separator\n          ? formattedNumber.replace(/,/g, separator)\n          : formattedNumber\n      }\n    })\n\n    return () => unsubscribe()\n  }, [springValue, separator])\n\n  return <span className={`${className}`} ref={ref} />\n}\n",
      "type": "registry:ui"
    }
  ]
}