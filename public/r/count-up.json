{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "count-up",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/components/count-up.tsx",
      "content": "\"use client\"\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { useInView, useMotionValue, useSpring } from \"motion/react\"\r\n\r\ninterface CountUpProps {\r\n  to: number\r\n  from?: number\r\n  direction?: \"up\" | \"down\"\r\n  delay?: number\r\n  duration?: number\r\n  className?: string\r\n  startWhen?: boolean\r\n  separator?: string\r\n  onStart?: () => void\r\n  onEnd?: () => void\r\n}\r\n\r\nexport default function CountUp({\r\n  to,\r\n  from = 0,\r\n  direction = \"up\",\r\n  delay = 0,\r\n  duration = 2,\r\n  className = \"\",\r\n  startWhen = true,\r\n  separator = \"\",\r\n  onStart,\r\n  onEnd,\r\n}: CountUpProps) {\r\n  const ref = useRef<HTMLSpanElement>(null)\r\n  const motionValue = useMotionValue(direction === \"down\" ? to : from)\r\n\r\n  const damping = 20 + 40 * (1 / duration)\r\n  const stiffness = 100 * (1 / duration)\r\n\r\n  const springValue = useSpring(motionValue, {\r\n    damping,\r\n    stiffness,\r\n  })\r\n\r\n  const isInView = useInView(ref, { once: true, margin: \"0px\" })\r\n\r\n  useEffect(() => {\r\n    if (ref.current) {\r\n      ref.current.textContent = String(direction === \"down\" ? to : from)\r\n    }\r\n  }, [from, to, direction])\r\n\r\n  useEffect(() => {\r\n    if (isInView && startWhen) {\r\n      if (typeof onStart === \"function\") {\r\n        onStart()\r\n      }\r\n\r\n      const timeoutId = setTimeout(() => {\r\n        motionValue.set(direction === \"down\" ? from : to)\r\n      }, delay * 1000)\r\n\r\n      const durationTimeoutId = setTimeout(\r\n        () => {\r\n          if (typeof onEnd === \"function\") {\r\n            onEnd()\r\n          }\r\n        },\r\n        delay * 1000 + duration * 1000\r\n      )\r\n\r\n      return () => {\r\n        clearTimeout(timeoutId)\r\n        clearTimeout(durationTimeoutId)\r\n      }\r\n    }\r\n  }, [\r\n    isInView,\r\n    startWhen,\r\n    motionValue,\r\n    direction,\r\n    from,\r\n    to,\r\n    delay,\r\n    onStart,\r\n    onEnd,\r\n    duration,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = springValue.on(\"change\", (latest) => {\r\n      if (ref.current) {\r\n        const options = {\r\n          useGrouping: !!separator,\r\n          minimumFractionDigits: 0,\r\n          maximumFractionDigits: 0,\r\n        }\r\n\r\n        const formattedNumber = Intl.NumberFormat(\"en-US\", options).format(\r\n          Number(latest.toFixed(0))\r\n        )\r\n\r\n        ref.current.textContent = separator\r\n          ? formattedNumber.replace(/,/g, separator)\r\n          : formattedNumber\r\n      }\r\n    })\r\n\r\n    return () => unsubscribe()\r\n  }, [springValue, separator])\r\n\r\n  return <span className={`${className}`} ref={ref} />\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}