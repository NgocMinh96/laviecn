"use client"

import {
  forwardRef,
  useRef,
  type ComponentProps,
  type HTMLAttributes,
  type ReactNode,
} from "react"
import { useCopyButton } from "@/utils/use-copy-button"
import { Check, Copy } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

import { getIconForLanguageExtension } from "./icons"

export type CodeBlockProps = HTMLAttributes<HTMLElement> & {
  /**
   * Icon of code block
   *
   * When passed as a string, it assumes the value is the HTML of icon
   */
  icon?: ReactNode

  /**
   * Allow to copy code with copy button
   *
   * @defaultValue true
   */
  allowCopy?: boolean

  /**
   * Keep original background color generated by Shiki or Rehype Code
   *
   * @defaultValue false
   */
  keepBackground?: boolean

  viewportProps?: HTMLAttributes<HTMLElement>

  /**
   * show line numbers
   */
  "data-line-numbers"?: boolean

  /**
   * @defaultValue 1
   */
  "data-line-numbers-start"?: number
}

export const Pre = forwardRef<HTMLPreElement, HTMLAttributes<HTMLPreElement>>(
  ({ className, ...props }, ref) => {
    return (
      <pre
        ref={ref}
        className={cn("w-max min-w-full *:flex *:flex-col", className)}
        {...props}
      >
        {props.children}
      </pre>
    )
  }
)

Pre.displayName = "Pre"

export const CodeBlock = forwardRef<HTMLElement, CodeBlockProps>(
  (
    {
      title,
      allowCopy = true,
      keepBackground = false,
      icon,
      viewportProps,
      children,
      ...props
    },
    ref
  ) => {
    const areaRef = useRef<HTMLDivElement>(null)
    const onCopy = () => {
      const pre = areaRef.current?.getElementsByTagName("pre").item(0)
      if (!pre) return

      const clone = pre.cloneNode(true) as HTMLElement
      clone.querySelectorAll(".nd-copy-ignore").forEach((node) => {
        node.remove()
      })

      void navigator.clipboard.writeText(clone.textContent ?? "")
    }

    icon = title?.includes(".css")
      ? getIconForLanguageExtension("postcss")
      : icon

    return (
      <figure
        ref={ref}
        dir="ltr"
        {...props}
        className={cn(
          "not-prose group bg-fd-card relative my-4 overflow-hidden rounded-xl text-sm outline-none",
          keepBackground && "bg-(--shiki-light-bg) dark:bg-(--shiki-dark-bg)",
          props.className
        )}
      >
        {title ? (
          <div className="bg-fd-secondary flex items-center gap-2 px-4 py-1">
            {icon ? (
              <div
                className="text-fd-muted-foreground [&_svg]:size-3.5"
                dangerouslySetInnerHTML={
                  typeof icon === "string"
                    ? {
                        __html: icon,
                      }
                    : undefined
                }
              >
                {typeof icon !== "string" ? icon : null}
              </div>
            ) : null}
            <figcaption className="text-fd-muted-foreground flex-1 truncate">
              {title}
            </figcaption>
            {allowCopy ? (
              <CopyButton className="-me-2" onCopy={onCopy} />
            ) : null}
          </div>
        ) : (
          allowCopy && (
            <CopyButton
              className="absolute top-2 right-2 z-[2] backdrop-blur-md"
              onCopy={onCopy}
            />
          )
        )}
        <div
          ref={areaRef}
          {...viewportProps}
          className={cn(
            "fd-scroll-container max-h-[600px] overflow-auto py-3.5",
            props["data-line-numbers"] && "[&_.line]:pl-3",
            viewportProps?.className
          )}
          style={{
            counterSet: props["data-line-numbers"]
              ? `line ${Number(props["data-line-numbers-start"] ?? 1) - 1}`
              : undefined,
            ...viewportProps?.style,
          }}
        >
          {children}
        </div>
      </figure>
    )
  }
)

CodeBlock.displayName = "CodeBlock"

function CopyButton({
  className,
  onCopy,
  ...props
}: ComponentProps<"button"> & {
  onCopy: () => void
}) {
  const [checked, onClick] = useCopyButton(onCopy)

  return (
    <Button
      data-slot="copy-button"
      size="icon"
      variant="ghost"
      className={cn(
        "text-muted-foreground transition-opacity group-hover:opacity-100 [&_svg]:size-3.5",
        !checked && "[@media(hover:hover)]:opacity-0",
        className
      )}
      aria-label={checked ? "Copied Text" : "Copy Text"}
      onClick={onClick}
      {...props}
    >
      <Check className={cn("transition-transform", !checked && "scale-0")} />
      <Copy
        className={cn("absolute transition-transform", checked && "scale-0")}
      />
    </Button>
  )
}
